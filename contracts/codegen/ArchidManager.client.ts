/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, QueryMsg, GetCountResponse, State, DomainDefaultResponse, QueryErrorsResponse, SudoError, RenewJobsMapResponse, Binary, RenewMapResponse, RenewInfo } from "./ArchidManager.types";
export interface ArchidManagerReadOnlyInterface {
  contractAddress: string;
  getCount: () => Promise<GetCountResponse>;
  queryErrors: () => Promise<QueryErrorsResponse>;
  queryDomainDefault: ({
    address
  }: {
    address: Addr;
  }) => Promise<DomainDefaultResponse>;
  queryRenewMap: ({
    domainName
  }: {
    domainName: string;
  }) => Promise<RenewMapResponse>;
  queryRenewJobsMap: ({
    blockId
  }: {
    blockId: number;
  }) => Promise<RenewJobsMapResponse>;
}
export class ArchidManagerQueryClient implements ArchidManagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getCount = this.getCount.bind(this);
    this.queryErrors = this.queryErrors.bind(this);
    this.queryDomainDefault = this.queryDomainDefault.bind(this);
    this.queryRenewMap = this.queryRenewMap.bind(this);
    this.queryRenewJobsMap = this.queryRenewJobsMap.bind(this);
  }

  getCount = async (): Promise<GetCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_count: {}
    });
  };
  queryErrors = async (): Promise<QueryErrorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_errors: {}
    });
  };
  queryDomainDefault = async ({
    address
  }: {
    address: Addr;
  }): Promise<DomainDefaultResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_domain_default: {
        address
      }
    });
  };
  queryRenewMap = async ({
    domainName
  }: {
    domainName: string;
  }): Promise<RenewMapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_renew_map: {
        domain_name: domainName
      }
    });
  };
  queryRenewJobsMap = async ({
    blockId
  }: {
    blockId: number;
  }): Promise<RenewJobsMapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_renew_jobs_map: {
        block_id: blockId
      }
    });
  };
}
export interface ArchidManagerInterface extends ArchidManagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  increment: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  reset: ({
    count
  }: {
    count: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintDomain: ({
    domainName
  }: {
    domainName: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  renewDomain: ({
    domainName
  }: {
    domainName: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  scheduleAutoRenew: ({
    domainName
  }: {
    domainName: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelAutoRenew: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setDefault: ({
    domainName
  }: {
    domainName: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  startCronJob: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deposit: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ArchidManagerClient extends ArchidManagerQueryClient implements ArchidManagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increment = this.increment.bind(this);
    this.reset = this.reset.bind(this);
    this.mintDomain = this.mintDomain.bind(this);
    this.renewDomain = this.renewDomain.bind(this);
    this.scheduleAutoRenew = this.scheduleAutoRenew.bind(this);
    this.cancelAutoRenew = this.cancelAutoRenew.bind(this);
    this.setDefault = this.setDefault.bind(this);
    this.startCronJob = this.startCronJob.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  increment = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increment: {}
    }, fee, memo, _funds);
  };
  reset = async ({
    count
  }: {
    count: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reset: {
        count
      }
    }, fee, memo, _funds);
  };
  mintDomain = async ({
    domainName
  }: {
    domainName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_domain: {
        domain_name: domainName
      }
    }, fee, memo, _funds);
  };
  renewDomain = async ({
    domainName
  }: {
    domainName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      renew_domain: {
        domain_name: domainName
      }
    }, fee, memo, _funds);
  };
  scheduleAutoRenew = async ({
    domainName
  }: {
    domainName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      schedule_auto_renew: {
        domain_name: domainName
      }
    }, fee, memo, _funds);
  };
  cancelAutoRenew = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_auto_renew: {}
    }, fee, memo, _funds);
  };
  setDefault = async ({
    domainName
  }: {
    domainName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_default: {
        domain_name: domainName
      }
    }, fee, memo, _funds);
  };
  startCronJob = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      start_cron_job: {}
    }, fee, memo, _funds);
  };
  deposit = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {}
    }, fee, memo, _funds);
  };
  withdraw = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee, memo, _funds);
  };
}