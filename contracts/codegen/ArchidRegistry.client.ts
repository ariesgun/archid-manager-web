/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, InstantiateMsg, ExecuteMsg, Config, MetaDataUpdateMsg, Account, Website, QueryMsg, RecordExpirationResponse, ResolveAddressResponse, ResolveRecordResponse } from "./ArchidRegistry.types";
export interface ArchidRegistryReadOnlyInterface {
  contractAddress: string;
  resolveRecord: ({
    name
  }: {
    name: string;
  }) => Promise<ResolveRecordResponse>;
  recordExpiration: ({
    name
  }: {
    name: string;
  }) => Promise<RecordExpirationResponse>;
  resolveAddress: ({
    address
  }: {
    address: Addr;
  }) => Promise<ResolveAddressResponse>;
  config: () => Promise<Config>;
}
export class ArchidRegistryQueryClient implements ArchidRegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.resolveRecord = this.resolveRecord.bind(this);
    this.recordExpiration = this.recordExpiration.bind(this);
    this.resolveAddress = this.resolveAddress.bind(this);
    this.config = this.config.bind(this);
  }

  resolveRecord = async ({
    name
  }: {
    name: string;
  }): Promise<ResolveRecordResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      resolve_record: {
        name
      }
    });
  };
  recordExpiration = async ({
    name
  }: {
    name: string;
  }): Promise<RecordExpirationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      record_expiration: {
        name
      }
    });
  };
  resolveAddress = async ({
    address
  }: {
    address: Addr;
  }): Promise<ResolveAddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      resolve_address: {
        address
      }
    });
  };
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface ArchidRegistryInterface extends ArchidRegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  register: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  renewRegistration: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  extendSubdomainExpiry: ({
    domain,
    expiration,
    subdomain
  }: {
    domain: string;
    expiration: number;
    subdomain: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateResolver: ({
    name,
    newResolver
  }: {
    name: string;
    newResolver: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerSubdomain: ({
    domain,
    expiration,
    newOwner,
    newResolver,
    subdomain
  }: {
    domain: string;
    expiration: number;
    newOwner: Addr;
    newResolver: Addr;
    subdomain: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeSubdomain: ({
    domain,
    subdomain
  }: {
    domain: string;
    subdomain: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    config
  }: {
    config: Config;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateUserDomainData: ({
    metadataUpdate,
    name
  }: {
    metadataUpdate: MetaDataUpdateMsg;
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ArchidRegistryClient extends ArchidRegistryQueryClient implements ArchidRegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.register = this.register.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.renewRegistration = this.renewRegistration.bind(this);
    this.extendSubdomainExpiry = this.extendSubdomainExpiry.bind(this);
    this.updateResolver = this.updateResolver.bind(this);
    this.registerSubdomain = this.registerSubdomain.bind(this);
    this.removeSubdomain = this.removeSubdomain.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateUserDomainData = this.updateUserDomainData.bind(this);
  }

  register = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register: {
        name
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount
      }
    }, fee, memo, _funds);
  };
  renewRegistration = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      renew_registration: {
        name
      }
    }, fee, memo, _funds);
  };
  extendSubdomainExpiry = async ({
    domain,
    expiration,
    subdomain
  }: {
    domain: string;
    expiration: number;
    subdomain: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      extend_subdomain_expiry: {
        domain,
        expiration,
        subdomain
      }
    }, fee, memo, _funds);
  };
  updateResolver = async ({
    name,
    newResolver
  }: {
    name: string;
    newResolver: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_resolver: {
        name,
        new_resolver: newResolver
      }
    }, fee, memo, _funds);
  };
  registerSubdomain = async ({
    domain,
    expiration,
    newOwner,
    newResolver,
    subdomain
  }: {
    domain: string;
    expiration: number;
    newOwner: Addr;
    newResolver: Addr;
    subdomain: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_subdomain: {
        domain,
        expiration,
        new_owner: newOwner,
        new_resolver: newResolver,
        subdomain
      }
    }, fee, memo, _funds);
  };
  removeSubdomain = async ({
    domain,
    subdomain
  }: {
    domain: string;
    subdomain: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_subdomain: {
        domain,
        subdomain
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    config
  }: {
    config: Config;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, _funds);
  };
  updateUserDomainData = async ({
    metadataUpdate,
    name
  }: {
    metadataUpdate: MetaDataUpdateMsg;
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_user_domain_data: {
        metadata_update: metadataUpdate,
        name
      }
    }, fee, memo, _funds);
  };
}