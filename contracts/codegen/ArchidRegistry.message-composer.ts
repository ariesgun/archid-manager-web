/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { ExecuteMsg, Uint128, Addr, Config, MetaDataUpdateMsg, Account, Website, InstantiateMsg, QueryMsg, Schema } from "./ArchidRegistry.types";
export interface ArchidRegistryMsg {
  contractAddress: string;
  sender: string;
  register: ({
    name
  }: {
    name: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: ({
    amount
  }: {
    amount: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  renewRegistration: ({
    name
  }: {
    name: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  extendSubdomainExpiry: ({
    domain,
    expiration,
    subdomain
  }: {
    domain: string;
    expiration: number;
    subdomain: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateResolver: ({
    name,
    newResolver
  }: {
    name: string;
    newResolver: Addr;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerSubdomain: ({
    domain,
    expiration,
    newOwner,
    newResolver,
    subdomain
  }: {
    domain: string;
    expiration: number;
    newOwner: Addr;
    newResolver: Addr;
    subdomain: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeSubdomain: ({
    domain,
    subdomain
  }: {
    domain: string;
    subdomain: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    config
  }: {
    config: Config;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateUserDomainData: ({
    metadataUpdate,
    name
  }: {
    metadataUpdate: MetaDataUpdateMsg;
    name: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class ArchidRegistryMsgComposer implements ArchidRegistryMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.register = this.register.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.renewRegistration = this.renewRegistration.bind(this);
    this.extendSubdomainExpiry = this.extendSubdomainExpiry.bind(this);
    this.updateResolver = this.updateResolver.bind(this);
    this.registerSubdomain = this.registerSubdomain.bind(this);
    this.removeSubdomain = this.removeSubdomain.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateUserDomainData = this.updateUserDomainData.bind(this);
  }

  register = ({
    name
  }: {
    name: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register: {
            name
          }
        })),
        funds: _funds
      })
    };
  };
  withdraw = ({
    amount
  }: {
    amount: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {
            amount
          }
        })),
        funds: _funds
      })
    };
  };
  renewRegistration = ({
    name
  }: {
    name: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          renew_registration: {
            name
          }
        })),
        funds: _funds
      })
    };
  };
  extendSubdomainExpiry = ({
    domain,
    expiration,
    subdomain
  }: {
    domain: string;
    expiration: number;
    subdomain: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          extend_subdomain_expiry: {
            domain,
            expiration,
            subdomain
          }
        })),
        funds: _funds
      })
    };
  };
  updateResolver = ({
    name,
    newResolver
  }: {
    name: string;
    newResolver: Addr;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_resolver: {
            name,
            new_resolver: newResolver
          }
        })),
        funds: _funds
      })
    };
  };
  registerSubdomain = ({
    domain,
    expiration,
    newOwner,
    newResolver,
    subdomain
  }: {
    domain: string;
    expiration: number;
    newOwner: Addr;
    newResolver: Addr;
    subdomain: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_subdomain: {
            domain,
            expiration,
            new_owner: newOwner,
            new_resolver: newResolver,
            subdomain
          }
        })),
        funds: _funds
      })
    };
  };
  removeSubdomain = ({
    domain,
    subdomain
  }: {
    domain: string;
    subdomain: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_subdomain: {
            domain,
            subdomain
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    config
  }: {
    config: Config;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            config
          }
        })),
        funds: _funds
      })
    };
  };
  updateUserDomainData = ({
    metadataUpdate,
    name
  }: {
    metadataUpdate: MetaDataUpdateMsg;
    name: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_user_domain_data: {
            metadata_update: metadataUpdate,
            name
          }
        })),
        funds: _funds
      })
    };
  };
}